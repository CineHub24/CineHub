name: Apply schema migrations

on:
  push:
    branches:
      - main
      - db

jobs:
  apply_migrations:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3


      - name: Install dependencies & tooling
        run: |
          npm install
          npm install -g drizzle-kit pg

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install netcat
        run: sudo apt-get update && sudo apt-get install netcat-openbsd

      - name: Create SSH Tunnel
        run: |
          setsid ssh -o StrictHostKeyChecking=no -N -L 5432:localhost:5432 root@161.35.19.253 > ssh_tunnel.log 2>&1 &
          echo $! > ssh_pid.txt
          # Wait up to 15 seconds for the tunnel to establish
          for i in {1..15}; do
            if nc -z localhost 5432; then
              echo "SSH tunnel established."
              break
            fi
            sleep 1
          done
          # Verify tunnel
          if ! nc -z localhost 5432; then
            echo "ERROR: SSH tunnel could not be established."
            cat ssh_tunnel.log
            exit 1
          fi

      - name: Verify SSH Tunnel
        run: |
          lsof -i TCP:5432
          # Optional: Try connecting to the database
          PGPASSWORD=yourpassword psql -h localhost -U postgres -d cinehub -c '\conninfo' || echo "Cannot connect to PostgreSQL."

      - name: Validate DATABASE_URL secret
        env:
          DATABASE_URL: postgres://postgres:yourpassword@cinehub_db:5432/cinehub
        run: |
          if [ -z "$DATABASE_URL" ]; then
            echo "ERROR: DATABASE_URL secret is not set!"
            exit 1
          fi

      - name: Generate migrations
        run: npx drizzle-kit generate
        env:
          DATABASE_URL: postgres://postgres:yourpassword@cinehub_db:5432/cinehub

      - name: Apply migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: postgres://postgres:yourpassword@cinehub_db:5432/cinehub

      - name: Close SSH Tunnel
        if: always()
        run: |
          if [ -f ssh_pid.txt ]; then
            kill $(cat ssh_pid.txt) || echo "SSH Tunnel already closed."
          fi
